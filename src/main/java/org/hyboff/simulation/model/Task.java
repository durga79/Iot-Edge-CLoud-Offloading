package org.hyboff.simulation.model;

import org.hyboff.simulation.util.SimulationClock;

/**
 * Represents a computational task in the simulation.
 * Tasks are generated by IoT devices and processed by Fog devices.
 */
public class Task {
    private String id;
    private int millionInstructions; // Size of task in Million Instructions (MI)
    private int remainingMI;        // Remaining Million Instructions to process
    private int deadline;           // Deadline in seconds
    private boolean isUrgent;       // Flag for urgent tasks that may require dynamic offloading
    private double creationTime;     // Simulation time when the task was created
    private double startTime;        // Simulation time when the task processing started
    private double completionTime;   // Simulation time when the task was completed
    private double responseTime;     // Total response time (completion - creation)
    private String sourceFogId;      // ID of the fog device that generated/received this task
    private String targetFogId;      // ID of the fog device this task was offloaded to
    
    public Task(String id, int millionInstructions, int deadline, boolean isUrgent) {
        this.id = id;
        this.millionInstructions = millionInstructions;
        this.remainingMI = millionInstructions;
        this.deadline = deadline;
        this.isUrgent = isUrgent;
        this.creationTime = SimulationClock.clock();
        this.startTime = -1;
        this.completionTime = -1;
        this.responseTime = 0;
    }
    
    // Getters
    public String getId() {
        return id;
    }
    
    public int getMillionInstructions() {
        return millionInstructions;
    }
    
    /**
     * Get task size - alias for getMillionInstructions() for FogDevice compatibility
     */
    public int getSize() {
        return millionInstructions;
    }
    
    public int getDeadline() {
        return deadline;
    }
    
    public boolean isUrgent() {
        return isUrgent;
    }
    
    public double getCreationTime() {
        return creationTime;
    }
    
    public double getResponseTime() {
        return responseTime;
    }
    
    public void setSourceFogId(String fogId) {
        this.sourceFogId = fogId;
    }
    
    public String getSourceFogId() {
        return sourceFogId;
    }
    
    public void setTargetFogId(String fogId) {
        this.targetFogId = fogId;
    }
    
    public String getTargetFogId() {
        return targetFogId;
    }
    
    /**
     * Mark the task as started
     */
    public void start() {
        if (startTime < 0) {
            this.startTime = SimulationClock.clock();
        }
    }
    
    /**
     * Update the progress of this task based on the MIPS available
     * @param availableMips MIPS available to process this task
     */
    public void updateProgress(int availableMips) {
        if (startTime < 0) {
            // Task not started yet
            start();
        }
        
        // Calculate how many MI can be processed in this tick
        int processedMI = Math.min(availableMips, remainingMI);
        remainingMI -= processedMI;
        
        // Check if task is completed
        if (remainingMI <= 0) {
            complete();
        }
    }
    
    /**
     * Add additional response time (e.g., for communication delays)
     * @param additionalTime time to add in milliseconds
     */
    public void addResponseTime(double additionalTime) {
        this.responseTime += additionalTime;
    }
    
    /**
     * Decrement the deadline counter by 1 second
     */
    public void decrementDeadline() {
        this.deadline--;    
    }
    
    /**
     * Mark the task as completed and calculate response time
     */
    public void complete() {
        this.completionTime = SimulationClock.clock();
        this.responseTime = this.completionTime - this.creationTime;
    }
    
    /**
     * Check if the task has been completed
     */
    public boolean isCompleted() {
        return completionTime > 0;
    }
    
    @Override
    public String toString() {
        return "Task{" +
                "id='" + id + '\'' +
                ", size=" + millionInstructions + " MI" +
                ", deadline=" + deadline + " s" +
                ", urgent=" + isUrgent +
                (isCompleted() ? ", responseTime=" + responseTime : "") +
                '}';
    }
}
