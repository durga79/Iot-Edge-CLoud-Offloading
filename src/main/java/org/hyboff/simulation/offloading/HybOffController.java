package org.hyboff.simulation.offloading;

import org.hyboff.simulation.model.FogDevice;
import org.hyboff.simulation.model.IoTDevice;
import org.hyboff.simulation.model.Task;
import org.hyboff.simulation.util.Log;

import java.util.List;
import java.util.ArrayList;

/**
 * Controller that manages the offloading process in the HybOff simulation.
 * This class coordinates task offloading using the specified policy and
 * collects metrics about the offloading process.
 */
public class HybOffController {
    private List<FogDevice> fogDevices;
    private OffloadingPolicy offloadingPolicy;
    private int totalTasks;
    private int offloadedTasks;
    private int locallyProcessedTasks;
    private int failedTasks;
    
    public HybOffController(List<FogDevice> fogDevices, OffloadingPolicy offloadingPolicy) {
        this.fogDevices = fogDevices;
        this.offloadingPolicy = offloadingPolicy;
        this.totalTasks = 0;
        this.offloadedTasks = 0;
        this.locallyProcessedTasks = 0;
        this.failedTasks = 0;
        
        // Initialize the offloading policy with the current state of fog devices
        this.offloadingPolicy.updatePolicy(fogDevices);
    }
    
    /**
     * Process a task generated by an IoT device.
     * Decides whether to process locally or offload to another fog device.
     */
    public void processTask(IoTDevice iotDevice, Task task) {
        totalTasks++;
        FogDevice sourceFog = iotDevice.getConnectedFogDevice();
        
        if (sourceFog == null) {
            Log.printLine("Warning: IoT device " + iotDevice.getId() + " not connected to any fog device.");
            failedTasks++;
            return;
        }
        
        // Check if the task should be offloaded
        boolean shouldOffload = offloadingPolicy.shouldOffload(sourceFog, task);
        
        if (shouldOffload) {
            // Select target fog device for offloading
            FogDevice targetFog = offloadingPolicy.selectOffloadingTarget(sourceFog, task, fogDevices);
            
            if (targetFog != null && targetFog != sourceFog) {
                // Log the offloading decision
                Log.printLine("Task " + task.getId() + " offloaded from " + 
                              sourceFog.getId() + " to " + targetFog.getId());
                
                // Try to process the task at the target
                if (targetFog.receiveTask(task)) {
                    offloadedTasks++;
                    targetFog.processTask(task);
                    return;
                }
            }
            
            // If offloading failed, try to process locally
            if (sourceFog.receiveTask(task)) {
                locallyProcessedTasks++;
                sourceFog.processTask(task);
            } else {
                failedTasks++;
                Log.printLine("Task " + task.getId() + " failed: no suitable device found");
            }
        } else {
            // Process locally
            if (sourceFog.receiveTask(task)) {
                locallyProcessedTasks++;
                sourceFog.processTask(task);
            } else {
                failedTasks++;
                Log.printLine("Task " + task.getId() + " failed: local processing not possible");
            }
        }
    }
    
    /**
     * Update the status of all fog devices and the offloading policy
     */
    public void updateStatus() {
        // Update the offloading policy
        offloadingPolicy.updatePolicy(fogDevices);
        
        // Print current statistics
        printStatistics();
    }
    
    /**
     * Print statistics about the offloading process
     */
    private void printStatistics() {
        // Calculate metrics
        double offloadingRatio = (double) offloadedTasks / totalTasks;
        double failureRatio = (double) failedTasks / totalTasks;
        
        // Log metrics for debugging
        Log.printLine("=== Offloading Statistics ===");
        Log.printLine("Total Tasks: " + totalTasks);
        Log.printLine("Offloaded Tasks: " + offloadedTasks + " (" + String.format("%.2f", offloadingRatio * 100) + "%)");
        Log.printLine("Locally Processed: " + locallyProcessedTasks + " (" + 
                     String.format("%.2f", (double) locallyProcessedTasks / totalTasks * 100) + "%)");
        Log.printLine("Failed Tasks: " + failedTasks + " (" + String.format("%.2f", failureRatio * 100) + "%)");
        
        // Calculate average utilization
        double avgUtilization = 0;
        for (FogDevice device : fogDevices) {
            avgUtilization += device.getUtilizationRatio();
        }
        avgUtilization /= fogDevices.size();
        
        Log.printLine("Average Fog Utilization: " + String.format("%.2f", avgUtilization * 100) + "%");
        Log.printLine("===========================");
    }
    
    /**
     * Get statistics about the offloading process
     */
    public OffloadingStatistics getStatistics() {
        OffloadingStatistics stats = new OffloadingStatistics();
        stats.totalTasks = totalTasks;
        stats.offloadedTasks = offloadedTasks;
        stats.locallyProcessedTasks = locallyProcessedTasks;
        stats.failedTasks = failedTasks;
        
        return stats;
    }
    
    /**
     * Inner class to represent offloading statistics
     */
    public static class OffloadingStatistics {
        public int totalTasks;
        public int offloadedTasks;
        public int locallyProcessedTasks;
        public int failedTasks;
    }
}
